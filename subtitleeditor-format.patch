--- subtitleeditor-0.52.1/src/vp/gstplayer.cc.orig	2015-06-21 23:09:29.000000000 +0200
+++ subtitleeditor-0.52.1/src/vp/gstplayer.cc	2016-02-19 21:56:40.933735723 +0100
@@ -257,7 +257,7 @@
 	gint64 gend = end * Gst::MILLI_SECOND;
 
 	se_debug_message(SE_DEBUG_VIDEO_PLAYER,
-			"pipeline->seek(%" GST_TIME_FORMAT", %"GST_TIME_FORMAT")", 
+			"pipeline->seek(%" GST_TIME_FORMAT ", %" GST_TIME_FORMAT ")", 
 			GST_TIME_ARGS(gstart), GST_TIME_ARGS(gend));
 
 	bool ret = m_pipeline->seek(
@@ -418,7 +418,7 @@
 	catch(std::runtime_error &ex)
 	{
 		se_debug_message(SE_DEBUG_VIDEO_PLAYER, "failed to gen_audio_element '%s'", ex.what());
-		GST_ELEMENT_WARNING(m_pipeline->gobj(), RESOURCE, NOT_FOUND, (ex.what()), (NULL));
+		GST_ELEMENT_WARNING(m_pipeline->gobj(), RESOURCE, NOT_FOUND, ("%s", ex.what()), (NULL));
 	}
 	// Return an NULL ptr
 	return Glib::RefPtr<Gst::Element>();
@@ -508,7 +508,7 @@
 	catch(std::runtime_error &ex)
 	{
 		se_debug_message(SE_DEBUG_VIDEO_PLAYER, "failed to gen_video_element '%s'", ex.what());
-		GST_ELEMENT_ERROR(m_pipeline->gobj(), RESOURCE, NOT_FOUND, (ex.what()), (NULL));
+		GST_ELEMENT_ERROR(m_pipeline->gobj(), RESOURCE, NOT_FOUND, ("%s", ex.what()), (NULL));
 	}
 	// Return an NULL ptr
 	return Glib::RefPtr<Gst::Element>();
